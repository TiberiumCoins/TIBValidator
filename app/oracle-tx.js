let secp256k1 = require('secp256k1')

module.exports = function (opts) {
  let {
    foundersAddress,
    foundersPercent
  } = opts

  // convert pubkey from hex string to Buffer
  let oraclePubkey = Buffer.from(opts.oraclePubkey, 'hex')

  // verifies new coins that were generated by a community growth grant
  // only the holder of the pubkey can grant coins
  return {
    initialState: {},
    onInput (input, tx, state) {
      // verify that the tx was signed by the oracle
      if (!secp256k1.verify(tx.sigHash, input.signature, oraclePubkey)) {
        throw Error('Invalid signature')
      }

      // first output pays grant to community member,
      // can be any amount and any address
      let grantAmount = tx.to[0].amount

      // third output must pay a percentage of grant to founders
      let foundersPayout = tx.to[1]
      let expectedFoundersAmount = Math.floor(grantAmount * foundersPercent / 100)
      if (foundersPayout.amount !== expectedFoundersAmount) {
        throw Error(`Oracle must pay ${foundersPercent}% of grant amount to founders`)
      }
      if (foundersPayout.address !== foundersAddress) {
        throw Error('Founders payout has wrong address')
      }

      // grant txs should only have one input
      if (tx.from.length !== 1) {
        throw Error('Grant transactions must have exactly 1 input')
      }
    }
  }
}
